import typing

import sys
import os

Types = list[str]

def main():
    if len(sys.argv) != 2:
        sys.stderr.write("Usage: generate_ast <output directory>")
        sys.exit(64)
    output_dir = sys.argv[1]
    define_ast(output_dir, "Expr", [
        "Binary   : left: Box<dyn Expr<T>>, operator: Token, right: Box<dyn Expr<T>>",
        "Grouping : expression: Box<dyn Expr<T>>",
        "Literal  : value: Literal<T>",
        "Unary    : operator: Token, right: Box<dyn Expr<T>>"
    ])


def define_ast(output_dir: str, base_name: str, types: Types):
    path = os.path.join(output_dir, f"{base_name}_visitor.rs").lower()

    with open(path, "w", encoding="utf-8") as fp:
        fp.write("// Generated by generate_ast.py!\n\n")
        fp.write("use crate::token::*;\n\n")
        fp.write(f"pub trait {base_name}<T>{{\n")
        fp.write(f"  fn accept(visitor: impl {base_name}Visitor<T>) -> T;\n")
        fp.write("}\n")
        define_visitor(fp, base_name, types)
        for type_ in types:
            left, sep, right = type_.partition(":")
            struct_name, fields = left.strip(), right.strip()
            define_type(fp, base_name, struct_name, fields)


def define_type(writer: typing.IO, base_name: str, struct_name: str, field_list: str):
    visitor_name = f"{base_name}Visitor"
    # "Class" in Java
    # Struct constructor
    writer.write(f"pub struct {struct_name}<T>" + "{" + f"{field_list}" + "}\n")
    writer.write(f"impl <T>{base_name}<T> for {struct_name}<T> {{\n")
    # accept method
    writer.write(f"    fn accept(visitor: impl {visitor_name}<T>) -> T {{\n")
    writer.write(f"        visitor.visit_{struct_name.lower()}\n")
    writer.write("    }\n")
    writer.write("}\n\n")


def define_visitor(writer: typing.IO, base_name: str, types: Types):
    visitor_name = f"{base_name}Visitor"
    writer.write(f"pub trait {visitor_name}<T> {{\n")
    for type_ in types:
        type_name = type_.partition(":")[0].strip()
        writer.write(f"    fn visit_{type_name.lower()}_{base_name.lower()}(&self) -> T;\n")
    writer.write("}\n")

if __name__ == '__main__':
    main()
